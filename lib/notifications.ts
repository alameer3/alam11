// ูุธุงู ุงูุฅุดุนุงุฑุงุช ุงูุฐูู ูููุณุคูููู

export interface Notification {
  id: string
  title: string
  message: string
  type: 'info' | 'warning' | 'error' | 'success'
  priority: 'low' | 'medium' | 'high' | 'critical'
  timestamp: string
  read: boolean
  actionUrl?: string
  metadata?: Record<string, any>
}

export class NotificationService {
  private static instance: NotificationService
  private notifications: Notification[] = []
  private subscribers: ((notifications: Notification[]) => void)[] = []

  static getInstance(): NotificationService {
    if (!NotificationService.instance) {
      NotificationService.instance = new NotificationService()
    }
    return NotificationService.instance
  }

  // ุฅุถุงูุฉ ุฅุดุนุงุฑ ุฌุฏูุฏ
  addNotification(notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) {
    const newNotification: Notification = {
      ...notification,
      id: `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      timestamp: new Date().toISOString(),
      read: false
    }

    this.notifications.unshift(newNotification)
    
    // ุงูุงุญุชูุงุธ ุจุขุฎุฑ 100 ุฅุดุนุงุฑ ููุท
    if (this.notifications.length > 100) {
      this.notifications = this.notifications.slice(0, 100)
    }

    this.notifySubscribers()
    
    // ุญูุธ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    this.saveNotification(newNotification)
    
    // ุฅุฑุณุงู ุฅุดุนุงุฑ ููุฑู ูููุดุงูู ุงูุญุฑุฌุฉ
    if (notification.priority === 'critical') {
      this.sendImmediateAlert(newNotification)
    }

    return newNotification
  }

  // ุฅุดุนุงุฑ ุงููุฑุงูุจุฉ
  addMonitoringAlert(issue: {
    title: string
    description: string
    severity: 'low' | 'medium' | 'high' | 'critical'
    url?: string
  }) {
    const priorityMap = {
      low: 'low' as const,
      medium: 'medium' as const,
      high: 'high' as const,
      critical: 'critical' as const
    }

    const typeMap = {
      low: 'info' as const,
      medium: 'warning' as const,
      high: 'error' as const,
      critical: 'error' as const
    }

    return this.addNotification({
      title: `๐จ ${issue.title}`,
      message: issue.description,
      type: typeMap[issue.severity],
      priority: priorityMap[issue.severity],
      actionUrl: issue.url || '/admin/monitoring',
      metadata: { source: 'monitoring', severity: issue.severity }
    })
  }

  // ุฅุดุนุงุฑ ุฃุฏุงุก
  addPerformanceAlert(metric: string, value: number, threshold: number) {
    const priority = value > threshold * 2 ? 'critical' : value > threshold * 1.5 ? 'high' : 'medium'
    
    return this.addNotification({
      title: `โก ุชุญุฐูุฑ ุฃุฏุงุก: ${metric}`,
      message: `${metric} ูุตู ุฅูู ${value} (ุงูุญุฏ ุงููุณููุญ: ${threshold})`,
      type: priority === 'critical' ? 'error' : 'warning',
      priority,
      actionUrl: '/admin/monitoring',
      metadata: { source: 'performance', metric, value, threshold }
    })
  }

  // ุฅุดุนุงุฑ ุฃูุงู
  addSecurityAlert(event: string, details: string, severity: 'medium' | 'high' | 'critical') {
    return this.addNotification({
      title: `๐ ุชุญุฐูุฑ ุฃููู: ${event}`,
      message: details,
      type: 'error',
      priority: severity,
      actionUrl: '/admin/security',
      metadata: { source: 'security', event }
    })
  }

  // ุฅุดุนุงุฑ ูุฌุงุญ
  addSuccessNotification(title: string, message: string) {
    return this.addNotification({
      title: `โ ${title}`,
      message,
      type: 'success',
      priority: 'low',
      metadata: { source: 'system' }
    })
  }

  // ูุถุน ุนูุงูุฉ ููุฑูุก
  markAsRead(notificationId: string) {
    const notification = this.notifications.find(n => n.id === notificationId)
    if (notification) {
      notification.read = true
      this.notifySubscribers()
      this.updateNotificationInDB(notificationId, { read: true })
    }
  }

  // ูุถุน ุนูุงูุฉ ููุฑูุก ุนูู ุงููู
  markAllAsRead() {
    this.notifications.forEach(n => n.read = true)
    this.notifySubscribers()
    this.updateAllNotificationsInDB({ read: true })
  }

  // ุญุฐู ุฅุดุนุงุฑ
  deleteNotification(notificationId: string) {
    this.notifications = this.notifications.filter(n => n.id !== notificationId)
    this.notifySubscribers()
    this.deleteNotificationFromDB(notificationId)
  }

  // ุงูุญุตูู ุนูู ุงูุฅุดุนุงุฑุงุช
  getNotifications(filter?: {
    read?: boolean
    type?: Notification['type']
    priority?: Notification['priority']
    limit?: number
  }) {
    let filtered = this.notifications

    if (filter) {
      if (filter.read !== undefined) {
        filtered = filtered.filter(n => n.read === filter.read)
      }
      if (filter.type) {
        filtered = filtered.filter(n => n.type === filter.type)
      }
      if (filter.priority) {
        filtered = filtered.filter(n => n.priority === filter.priority)
      }
      if (filter.limit) {
        filtered = filtered.slice(0, filter.limit)
      }
    }

    return filtered
  }

  // ุนุฏุฏ ุงูุฅุดุนุงุฑุงุช ุบูุฑ ุงูููุฑูุกุฉ
  getUnreadCount() {
    return this.notifications.filter(n => !n.read).length
  }

  // ุงุดุชุฑุงู ูู ุงูุชุญุฏูุซุงุช
  subscribe(callback: (notifications: Notification[]) => void) {
    this.subscribers.push(callback)
    
    // ุฅุฑุฌุงุน ุฏุงูุฉ ุฅูุบุงุก ุงูุงุดุชุฑุงู
    return () => {
      this.subscribers = this.subscribers.filter(sub => sub !== callback)
    }
  }

  // ุฅุดุนุงุฑ ุงููุดุชุฑููู
  private notifySubscribers() {
    this.subscribers.forEach(callback => callback(this.notifications))
  }

  // ุฅุฑุณุงู ุชูุจูู ููุฑู
  private async sendImmediateAlert(notification: Notification) {
    console.error(`๐จ ุชูุจูู ุนุงุฌู: ${notification.title}`)
    console.error(`๐ ุงูุฑุณุงูุฉ: ${notification.message}`)
    
    // ูููู ุฅุถุงูุฉ ุฅุฑุณุงู ุฅูููู ุฃู ุฑุณุงูุฉ SMS ููุง
    // await this.sendEmail(notification)
    // await this.sendSMS(notification)
    
    // ุฅุดุนุงุฑ ูู ุงููุชุตูุญ (ุฅุฐุง ูุงู ูุชุงุญุงู)
    if (typeof window !== 'undefined' && 'Notification' in window) {
      if (Notification.permission === 'granted') {
        new Notification(notification.title, {
          body: notification.message,
          icon: '/favicon.ico',
          tag: notification.id
        })
      }
    }
  }

  // ุญูุธ ุงูุฅุดุนุงุฑ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
  private async saveNotification(notification: Notification) {
    try {
      const { PrismaClient } = await import('@prisma/client')
      const prisma = new PrismaClient()
      
      // TODO: ุฅุถุงูุฉ notification ุฅูู Prisma schema
      console.log('Notification Saved:', {
        title: notification.title,
        type: notification.type,
        priority: notification.priority
      })
      
      await prisma.$disconnect()
    } catch (error) {
      console.error('ูุดู ูู ุญูุธ ุงูุฅุดุนุงุฑ:', error)
    }
  }

  // ุชุญุฏูุซ ุงูุฅุดุนุงุฑ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
  private async updateNotificationInDB(id: string, data: Partial<Notification>) {
    try {
      const { PrismaClient } = await import('@prisma/client')
      const prisma = new PrismaClient()
      
      // TODO: ุชุญุฏูุซ notification ูู Prisma schema
      console.log('Notification Updated:', id, data)
      
      await prisma.$disconnect()
    } catch (error) {
      console.error('ูุดู ูู ุชุญุฏูุซ ุงูุฅุดุนุงุฑ:', error)
    }
  }

  // ุชุญุฏูุซ ุฌููุน ุงูุฅุดุนุงุฑุงุช
  private async updateAllNotificationsInDB(data: Partial<Notification>) {
    try {
      const { PrismaClient } = await import('@prisma/client')
      const prisma = new PrismaClient()
      
      // TODO: ุชุญุฏูุซ ุฌููุน ุงูnotifications ูู Prisma schema
      console.log('All Notifications Updated:', data)
      
      await prisma.$disconnect()
    } catch (error) {
      console.error('ูุดู ูู ุชุญุฏูุซ ุงูุฅุดุนุงุฑุงุช:', error)
    }
  }

  // ุญุฐู ุงูุฅุดุนุงุฑ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
  private async deleteNotificationFromDB(id: string) {
    try {
      const { PrismaClient } = await import('@prisma/client')
      const prisma = new PrismaClient()
      
      // TODO: ุญุฐู notification ูู Prisma schema
      console.log('Notification Deleted:', id)
      
      await prisma.$disconnect()
    } catch (error) {
      console.error('ูุดู ูู ุญุฐู ุงูุฅุดุนุงุฑ:', error)
    }
  }

  // ุชุญููู ุงูุฅุดุนุงุฑุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
  async loadNotificationsFromDB() {
    try {
      const { PrismaClient } = await import('@prisma/client')
      const prisma = new PrismaClient()
      
      // TODO: ุชุญููู notifications ูู Prisma schema
      console.log('Loading notifications from database...')
      // ูู ุงูููุช ุงูุญุงููุ ุงูุฅุดุนุงุฑุงุช ูุญููุธุฉ ูู ุงูุฐุงูุฑุฉ ููุท
      
      this.notifySubscribers()
      await prisma.$disconnect()
    } catch (error) {
      console.error('ูุดู ูู ุชุญููู ุงูุฅุดุนุงุฑุงุช:', error)
    }
  }
}

// Auto Notification Manager - ูุฑุงูุจ ููุฑุณู ุฅุดุนุงุฑุงุช ุชููุงุฆูุฉ
export class AutoNotificationManager {
  private notificationService: NotificationService
  private intervalId: NodeJS.Timeout | null = null

  constructor() {
    this.notificationService = NotificationService.getInstance()
  }

  // ุจุฏุก ุงููุฑุงูุจุฉ ุงูุชููุงุฆูุฉ ููุฅุดุนุงุฑุงุช
  start() {
    // ุชุญููู ุงูุฅุดุนุงุฑุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    this.notificationService.loadNotificationsFromDB()

    // ูุญุต ุฏูุฑู ูู 30 ุซุงููุฉ
    this.intervalId = setInterval(() => {
      this.checkSystemHealth()
    }, 30000)

    // ุฅุดุนุงุฑ ุจุฏุก ุงููุธุงู
    this.notificationService.addSuccessNotification(
      'ุชู ุชุดุบูู ูุธุงู ุงููุฑุงูุจุฉ',
      'ูุธุงู ุงููุฑุงูุจุฉ ุงูุฐูู ูุนูู ุงูุขู ููุฑุงูุจ ุญุงูุฉ ุงููููุน'
    )
  }

  // ุฅููุงู ุงููุฑุงูุจุฉ
  stop() {
    if (this.intervalId) {
      clearInterval(this.intervalId)
      this.intervalId = null
    }
  }

  // ูุญุต ุตุญุฉ ุงููุธุงู ูุฅุฑุณุงู ุฅุดุนุงุฑุงุช
  private async checkSystemHealth() {
    try {
      // ูุญุต ุงุณุชุฌุงุจุฉ ุงูุฎุงุฏู
      const start = Date.now()
      const response = await fetch('/api/health')
      const responseTime = Date.now() - start

      // ุชุญุฐูุฑ ุฅุฐุง ูุงู ููุช ุงูุงุณุชุฌุงุจุฉ ุจุทูุก
      if (responseTime > 3000) {
        this.notificationService.addPerformanceAlert(
          'ููุช ุงุณุชุฌุงุจุฉ ุงูุฎุงุฏู',
          responseTime,
          2000
        )
      }

      // ูุญุต ุงุณุชุฎุฏุงู ุงูุฐุงูุฑุฉ
      if (typeof process !== 'undefined') {
        const memUsage = process.memoryUsage()
        const memUsagePercent = (memUsage.heapUsed / memUsage.heapTotal) * 100

        if (memUsagePercent > 80) {
          this.notificationService.addPerformanceAlert(
            'ุงุณุชุฎุฏุงู ุงูุฐุงูุฑุฉ',
            Math.round(memUsagePercent),
            70
          )
        }
      }

    } catch (error) {
      this.notificationService.addMonitoringAlert({
        title: 'ูุดู ูู ูุญุต ุตุญุฉ ุงููุธุงู',
        description: `ุฎุทุฃ ูู ุงููุญุต ุงูุชููุงุฆู: ${error}`,
        severity: 'high'
      })
    }
  }
}

// ุชุตุฏูุฑ singleton
export const notificationService = NotificationService.getInstance()
export const autoNotificationManager = new AutoNotificationManager()